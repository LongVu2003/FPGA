module lookup_table(
    input clk,
    input [1:0] address,
    input [7:0] index,
    output reg [3:0] data
);

// Lưu trữ tập các số nguyên v={-3 -1 1 3} dùng để tạo ra các ký hiệu điều chế 16-QAM (x_1,x_2)
reg [3:0] v [3:0];
initial begin
    v[0] = 4'b0011; // 3
    v[1] = 4'b0001; // 1
    v[2] = 4'b1110; // -1
    v[3] = 4'b1100; // -3
end

// Lưu trữ các ma trận tán xạ để tạo mã Alamouti STBC kích thước 2×2
reg [1:0] A_1 [1:0][1:0];
reg [1:0] A_2 [1:0][1:0];
reg [1:0] B_1 [1:0][1:0];
reg [1:0] B_2 [1:0][1:0];
initial begin
    A_1[0][0] = 2'b01; A_1[0][1] = 2'b00; A_1[1][0] = 2'b00; A_1[1][1] = 2'b01;
    A_2[0][0] = 2'b00; A_2[0][1] = 2'b01; A_2[1][0] = 2'b11; A_2[1][1] = 2'b00;
    B_1[0][0] = 2'b01; B_1[0][1] = 2'b00; B_1[1][0] = 2'b00; B_1[1][1] = 2'b11;
    B_2[0][0] = 2'b00; B_2[0][1] = 2'b01; B_2[1][0] = 2'b01; B_2[1][1] = 2'b00;
end

// Lưu trữ 16 từ mã SC
reg [3:0] S_1 [1:0], S_2 [1:0], S_3 [1:0], S_4 [1:0], S_5 [1:0], S_6 [1:0], S_7 [1:0], S_8 [1:0], S_9 [1:0], S_10 [1:0], S_11 [1:0], S_12 [1:0];
initial begin
    S_1[0] = 4'b1010; S_1[1] = 4'b1010;
    S_2[0] = 4'b1010; S_2[1] = 4'b1110;
    S_3[0] = 4'b1010; S_3[1] = 4'b1110;
    S_4[0] = 4'b1010; S_4[1] = 4'b1110;
    S_5[0] = 4'b1010; S_5[1] = 4'b1010;
    S_6[0] = 4'b1010; S_6[1] = 4'b1110;
    S_7[0] = 4'b1010; S_7[1] = 4'b1010;
    S_8[0] = 4'b1010; S_8[1] = 4'b1110;
    S_9[0] = 4'b1010; S_9[1] = 4'b1100;
    S_10[0] = 4'b1010; S_10[1] = 4'b1100;
    S_11[0] = 4'b1010; S_11[1] = 4'b1100;
    S_12[0] = 4'b1010; S_12[1] = 4'b1100;
end

// Lưu trữ các chuỗi bit dùng để ánh xạ từ bit sang các ký hiệu 16-QAM (B_v) và từ mã SC (B_s)
reg [1:0] B_v [3:0];
initial begin
    B_v[0] = 2'b00;
    B_v[1] = 2'b01;
    B_v[2] = 2'b11;
    B_v[3] = 2'b10;
end

reg [3:0] B_s [1:0][7:0];
initial begin
    B_s[0][0] = 4'b0000; B_s[0][1] = 4'b0001;B_s[0][2] = 4'b0010; B_s[0][3] = 4'b0011;B_s[0][4] = 4'b0100; B_s[0][5] = 4'b0101;B_s[0][6] = 4'b0110; B_s[0][7] = 4'b0111;
    B_s[1][0] = 4'b1000; B_s[1][1] = 4'b1001;B_s[1][2] = 4'b1010; B_s[1][3] = 4'b1011;B_s[1][4] = 4'b1100; B_s[1][5] = 4'b1101;B_s[1][6] = 4'b1110; B_s[1][7] = 4'b1111;

end

// Trả về dữ liệu dựa trên địa chỉ đầu vào
always @* begin
    case(address)
        2'b00: data = v[0]; // Chọn v
        2'b01: begin 
		case(index)
			8'd0 : data = A_1;
			8'd1 : data = A_2;
			8'd2 : data = B_1;
			8'd3 : data = B_2; endcase
	end
	default: data = 4'b0000;
    endcase
end

endmodule